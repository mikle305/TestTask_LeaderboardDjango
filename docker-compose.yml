services:
  backend:
    container_name: "backend"
    build: .
    volumes:
      - ./src:/code/src
      - ./.env:/code/.env
      - ./poetry.lock:/code/poetry.lock
      - ./pyproject.toml:/code/pyproject.toml
    ports:
      - "${APP__BACKEND_PORT}:${APP__BACKEND_PORT}"
    command: sh -c "
          while ! nc -z database ${DATABASE__PORT}; do 
            echo 'Waiting DB...'; 
            sleep 2; 
          done &&
          poetry run python manage.py migrate &&
          poetry run python manage.py runserver 0.0.0.0:${APP__BACKEND_PORT}
      "
    depends_on:
      - database
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:${APP__BACKEND_PORT}/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3

  database:
    container_name: "database"
    image: postgres:15-alpine
    restart: on-failure
    environment:
      POSTGRES_USER: ${DATABASE__USERNAME}
      POSTGRES_PASSWORD: ${DATABASE__PASSWORD}
      POSTGRES_DB: ${DATABASE__NAME}
    ports:
      - "${DATABASE__PORT}:${DATABASE__PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE__USERNAME} -d ${DATABASE__NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
